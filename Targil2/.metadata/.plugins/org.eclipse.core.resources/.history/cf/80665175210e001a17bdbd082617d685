import java.util.*;
public class MyLinkedList {
	int node_Count = 0;
	Node head = null;
	static class Node{
		int value;
		Node next_Node = null;
		Node(int value){
			this.value = value;
		}			
		}
	
	//addNode(Node n) - adds a node to the end of the list
	public void addNode(Node n) {
		if(node_Count == 0) { 
			head = n;
			node_Count++;
		}
		else {
			Node index = head;
			while(index.next_Node != null) {
				index = index.next_Node;
			}
			index.next_Node = n;
			node_Count++;
		}
	}
	
	//AddNode(Node n, int index)- adds a node to a specific place in the list
	public void AddNode(Node n, int index) {
		if((index > node_Count+1)||(index <= 0)) 
			System.out.println("Invalid Index Value");
		else {
			Node temp = head;
			for(int i = 1; i < index-1; i++) {
				temp = temp.next_Node;
			}
			if(temp.next_Node != null) {
				n.next_Node = temp.next_Node;
				temp.next_Node = n;
			}
			else
				temp.next_Node = n;
			node_Count++;
		}
		
	}
	
	//RemoveNode() - removes the last node of the list
	public void RemoveNode() {
		if(node_Count == 0) {
			System.out.println("There list is empty");
			return;
		}
		Node temp = head;
		for(int i = 1 ; i < node_Count-1;i++)
			temp = temp.next_Node;
		temp.next_Node = null;
		node_Count--;
	}
	public void RemoveNode(int index) {
		//If the list is empty
		if(node_Count == 0) {
			System.out.println("The list is empty");
			return;
		}
		
		//If we exceeded the amount of nodes OR put a negative one
		if( (index > node_Count) || (index <= 0)) {
			System.out.println("Invalid Index Value");
			return;
		}
		
		//If the node count is 1 OR the index is 1 , then its the same case, so we can refer it to the next node
		Node tail = head;
		if(node_Count == 1 || index == 1 ) { 
				head = head.next_Node;
				return;
		}
		
		//If the list amount is over 1 AND the index is in the middle of the list(Rest cases), then I do this
		Node ind = head.next_Node;
		Node front = ind.next_Node;
		for(int i=1; i < index-1; i++) {
			front = front.next_Node;
			tail = tail.next_Node;
		}
		tail.next_Node = front;
	}
	
	public void PrintList() {
		Node curr_Node = head;
		while(curr_Node != null) {
			System.out.println(curr_Node.value);
			curr_Node = curr_Node.next_Node;
		}
	}
	
	public void Reverse() {
		int list[];
		Node temp;
		list = new int[node_Count];
		for(int i = 0; i < node_Count-1; i++) {
			temp.value = list[i];
		}
	}
	
	
	public static void main(String[]args) {
		MyLinkedList l = new MyLinkedList();
		Node n = new Node(6);
		Node n2 = new Node(7);
		Node n3 = new Node(8);
		Node n4 = new Node(34);
		Node n5 = new Node(16);
		Node n6 = new Node(10);
		l.addNode(n);
		l.addNode(n2);
		l.AddNode(n3,2);
		l.addNode(n4);
		l.addNode(n5);
		l.AddNode(n6,2);
		l.RemoveNode(1);
		System.out.println(l.head.value);
		l.PrintList();
	}
}
